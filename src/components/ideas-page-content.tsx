'use client'

import { useState, useEffect, useRef } from 'react'
import { useSearchParams, useRouter } from 'next/navigation'
import { createClient } from '@/lib/supabase/client'
import { cacheInvalidation } from '@/hooks/use-content'
import { Brand, ContentAngle, ContentIdeaWithGenerated } from '@/types/database'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Twitter, Linkedin, Mail, Lightbulb, Image as ImageIcon, Loader2, Clock, CheckCircle, Sparkles, Calendar, Eye, Plus } from 'lucide-react'
import Link from 'next/link'
import { IdeaGenerator } from '@/components/idea-generator'

interface Props {
  brand: Brand
  angles: ContentAngle[]
  selectedAngle: ContentAngle
  initialIdeas: ContentIdeaWithGenerated[]
}

export function IdeasPageContent({ brand, angles, selectedAngle, initialIdeas }: Props) {
  const [ideas, setIdeas] = useState<ContentIdeaWithGenerated[]>(initialIdeas)
  const [generating, setGenerating] = useState(false)
  const [refreshKey, setRefreshKey] = useState(0)
  const hasAutoGenerated = useRef(false)
  const searchParams = useSearchParams()
  const router = useRouter()
  const supabase = createClient()

  // Listen for content generation events
  useEffect(() => {
    const handleContentGenerated = async (event: CustomEvent) => {
      console.log('🔄 Content generated event received in ideas page:', event.detail)
      const { ideaId, brandId, angleId } = event.detail
      
      // Only refresh if it's for this brand and angle
      if (brandId === brand.id && angleId === selectedAngle.id) {
        // Fetch updated idea with generated content
        const { data: updatedIdea } = await supabase
          .from('content_ideas')
          .select(`
            *,
            generated_content (
              id,
              created_at,
              content,
              image_url
            )
          `)
          .eq('id', ideaId)
          .single()
        
        if (updatedIdea) {
          setIdeas(prevIdeas => 
            prevIdeas.map(idea => 
              idea.id === ideaId ? updatedIdea : idea
            )
          )
        }
        
        // Invalidate related caches
        cacheInvalidation.invalidateIdeaContent(ideaId, angleId, brandId)
        
        // Trigger refresh key for re-renders
        setRefreshKey(prev => prev + 1)
      }
    }

    window.addEventListener('contentGenerated', handleContentGenerated as EventListener)
    
    return () => {
      window.removeEventListener('contentGenerated', handleContentGenerated as EventListener)
    }
  }, [brand.id, selectedAngle.id, supabase])

  // Handle auto-generation (fixed to prevent double calls)
  useEffect(() => {
    const shouldAutoGenerate = searchParams.get('auto') === 'true'
    const targetPlatform = searchParams.get('platform') || selectedAngle.platform
    const mode = searchParams.get('mode') || 'new'
    
    if (shouldAutoGenerate && !generating && !hasAutoGenerated.current) {
      console.log('Auto-triggering idea generation for platform:', targetPlatform, 'mode:', mode)
      hasAutoGenerated.current = true
      handleAutoGeneration(targetPlatform)
    }
  }, []) // Removed dependencies to prevent re-runs

  const handleAutoGeneration = async (platform: string) => {
    setGenerating(true)
    try {
      console.log('🚀 Starting auto idea generation for platform:', platform)
      
      const requestData = {
        identifier: 'generateIdeas',
        data: {
          angleId: selectedAngle.id,
          platform,
          selectedAngle: {
            header: selectedAngle.header,
            description: selectedAngle.description,
            tonality: selectedAngle.tonality,
            objective: selectedAngle.objective,
          },
          brandData: {
            name: brand.name,
            website: brand.website,
            targetAudience: brand.target_audience || '',
            brandTone: brand.brand_tone || '',
            keyOffer: brand.key_offer || '',
            imageGuidelines: brand.image_guidelines || '',
          },
        },
      }

      console.log('🚀 Sending request:', JSON.stringify(requestData, null, 2))

      const response = await fetch('/api/n8n', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
      })

      if (!response.ok) {
        throw new Error('Failed to generate ideas')
      }

      const data = await response.json()
      console.log('✅ Ideas response:', JSON.stringify(data, null, 2))
      
      // Handle multiple response formats
      let ideasArray: any[] = []
      
      if (Array.isArray(data)) {
        if (data.length > 0 && data[0].ideas && Array.isArray(data[0].ideas)) {
          ideasArray = data[0].ideas
          console.log(`📋 Using n8n nested format (${ideasArray.length} ideas)`)
        }
      } else if (data.ideas && Array.isArray(data.ideas)) {
        ideasArray = data.ideas
        console.log(`📋 Using direct format (${ideasArray.length} ideas)`)
      }
      
      if (ideasArray.length === 0) {
        throw new Error('No ideas were generated')
      }
      
      // Save ideas to database
      const ideaInserts = ideasArray.map((idea: any) => ({
        angle_id: selectedAngle.id,
        platform,
        topic: idea.topic,
        description: idea.description,
        image_prompt: idea.imagePrompt,
      }))

      const { data: insertedIdeas, error } = await supabase
        .from('content_ideas')
        .insert(ideaInserts)
        .select()

      if (error) throw error

      // Update local state with the returned data that includes id and created_at
      if (insertedIdeas) {
        setIdeas(prevIdeas => [...prevIdeas, ...insertedIdeas])
      }
      
      // Clean URL by removing auto parameter
      const newUrl = new URL(window.location.href)
      newUrl.searchParams.delete('auto')
      router.replace(newUrl.pathname + newUrl.search)
      
      console.log(`✅ Successfully generated and saved ${ideasArray.length} ideas`)
      
    } catch (error) {
      console.error('❌ Error in auto-generation:', error)
      alert('Failed to generate content ideas. Please try again.')
    } finally {
      setGenerating(false)
    }
  }

  const getPlatformIdeas = (platform: string) => {
    return ideas.filter(idea => idea.platform === platform)
  }

  const getPlatformStats = (platform: string) => {
    const platformIdeas = getPlatformIdeas(platform)
    const total = platformIdeas.length
    const generated = platformIdeas.filter(idea => 
      Boolean(idea.generated_content && idea.generated_content.length > 0)
    ).length
    return { total, generated, pending: total - generated }
  }

  const defaultPlatform = searchParams.get('platform') || selectedAngle.platform || 'twitter'

  if (generating) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="text-center">
          <Loader2 className="w-12 h-12 text-blue-600 animate-spin mx-auto mb-4" />
          <h3 className="text-lg font-semibold text-gray-900 mb-2">
            Generating Content Ideas...
          </h3>
          <p className="text-gray-600">
            AI is creating personalized content ideas for {selectedAngle.header}
          </p>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Strategy Context Card */}
      <Card className="bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200">
        <CardHeader className="pb-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-blue-100 rounded-lg">
                <Lightbulb className="w-5 h-5 text-blue-600" />
              </div>
              <div>
                <CardTitle className="text-xl text-blue-900">{selectedAngle.header}</CardTitle>
                <p className="text-sm text-blue-700 mt-1">Content Strategy Angle</p>
              </div>
            </div>
            <Badge className="bg-blue-100 text-blue-800 border-blue-200 px-3 py-1">
              {selectedAngle.platform}
            </Badge>
          </div>
        </CardHeader>
        <CardContent className="pt-0">
          <div className="grid md:grid-cols-3 gap-4 text-sm">
            <div>
              <span className="font-medium text-blue-900">Description:</span>
              <p className="text-blue-700 mt-1 line-clamp-2">{selectedAngle.description}</p>
            </div>
            <div>
              <span className="font-medium text-blue-900">Tonality:</span>
              <p className="text-blue-700 mt-1">{selectedAngle.tonality}</p>
            </div>
            <div>
              <span className="font-medium text-blue-900">Objective:</span>
              <p className="text-blue-700 mt-1">{selectedAngle.objective}</p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Platform-based Ideas */}
      <Tabs defaultValue={defaultPlatform} className="w-full">
        <TabsList className="grid w-full grid-cols-3 h-12">
          <TabsTrigger value="twitter" className="flex items-center gap-2 text-sm">
            <Twitter className="w-4 h-4" />
            Twitter ({getPlatformStats('twitter').generated}/{getPlatformStats('twitter').total})
          </TabsTrigger>
          <TabsTrigger value="linkedin" className="flex items-center gap-2 text-sm">
            <Linkedin className="w-4 h-4" />
            LinkedIn ({getPlatformStats('linkedin').generated}/{getPlatformStats('linkedin').total})
          </TabsTrigger>
          <TabsTrigger value="newsletter" className="flex items-center gap-2 text-sm">
            <Mail className="w-4 h-4" />
            Newsletter ({getPlatformStats('newsletter').generated}/{getPlatformStats('newsletter').total})
          </TabsTrigger>
        </TabsList>

        <TabsContent value="twitter" className="mt-6">
          <EnhancedPlatformIdeas 
            platform="twitter"
            ideas={getPlatformIdeas('twitter')}
            brand={brand}
            angle={selectedAngle}
          />
        </TabsContent>

        <TabsContent value="linkedin" className="mt-6">
          <EnhancedPlatformIdeas 
            platform="linkedin"
            ideas={getPlatformIdeas('linkedin')}
            brand={brand}
            angle={selectedAngle}
          />
        </TabsContent>

        <TabsContent value="newsletter" className="mt-6">
          <EnhancedPlatformIdeas 
            platform="newsletter"
            ideas={getPlatformIdeas('newsletter')}
            brand={brand}
            angle={selectedAngle}
          />
        </TabsContent>
      </Tabs>
    </div>
  )
}

interface PlatformIdeasProps {
  platform: string
  ideas: ContentIdeaWithGenerated[]
  brand: Brand
  angle: ContentAngle
}

function EnhancedPlatformIdeas({ platform, ideas, brand, angle }: PlatformIdeasProps) {
  const getPlatformIcon = (platform: string) => {
    switch (platform) {
      case 'twitter': return <Twitter className="w-5 h-5" />
      case 'linkedin': return <Linkedin className="w-5 h-5" />
      case 'newsletter': return <Mail className="w-5 h-5" />
      default: return <Lightbulb className="w-5 h-5" />
    }
  }

  const getPlatformColor = (platform: string) => {
    switch (platform) {
      case 'twitter': return 'bg-blue-50 border-blue-200 text-blue-900'
      case 'linkedin': return 'bg-indigo-50 border-indigo-200 text-indigo-900'
      case 'newsletter': return 'bg-green-50 border-green-200 text-green-900'
      default: return 'bg-gray-50 border-gray-200 text-gray-900'
    }
  }

  const getIdeaBadgeColor = (platform: string) => {
    switch (platform) {
      case 'twitter': return 'bg-blue-100 text-blue-800 border-blue-200'
      case 'linkedin': return 'bg-indigo-100 text-indigo-800 border-indigo-200'
      case 'newsletter': return 'bg-green-100 text-green-800 border-green-200'
      default: return 'bg-gray-100 text-gray-800 border-gray-200'
    }
  }

  return (
    <div className="space-y-6">
      {/* Platform Header */}
      <Card className={`${getPlatformColor(platform)} border-2`}>
        <CardHeader className="pb-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              {getPlatformIcon(platform)}
              <div>
                <CardTitle className="text-xl capitalize">{platform} Content Ideas</CardTitle>
                <p className="text-sm opacity-75">
                  {ideas.length} {ideas.length === 1 ? 'idea' : 'ideas'} • {ideas.filter(idea => Boolean(idea.generated_content && idea.generated_content.length > 0)).length} generated
                </p>
              </div>
            </div>
            <IdeaGenerator brand={brand} angle={angle} platform={platform} />
          </div>
        </CardHeader>
      </Card>

      {/* Ideas Grid or Empty State */}
      {ideas.length > 0 ? (
        <div className="space-y-4">
          {ideas.map((idea) => {
            const hasContent = Boolean(idea.generated_content && idea.generated_content.length > 0)
            const latestContent = hasContent ? idea.generated_content[0] : null
            
            return (
              <Card key={idea.id} className="hover:shadow-lg transition-all duration-200 hover:-translate-y-1 border border-gray-200">
                <CardHeader className="pb-3">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <div className="relative">
                        <div className="p-2 bg-yellow-100 rounded-lg">
                          <Lightbulb className="w-4 h-4 text-yellow-600" />
                        </div>
                        <div className={`absolute -top-1 -right-1 w-2.5 h-2.5 rounded-full border border-white ${hasContent ? 'bg-green-500' : 'bg-yellow-500'}`} />
                      </div>
                      <div>
                        <CardTitle className="text-lg font-medium">{idea.topic}</CardTitle>
                        <div className="flex items-center gap-2 mt-1">
                          <Badge className={`${getIdeaBadgeColor(platform)} text-xs px-2 py-1`}>
                            {platform}
                          </Badge>
                          <div className="flex items-center gap-1 text-xs text-gray-500">
                            <Calendar className="w-3 h-3" />
                            {new Date(idea.created_at).toLocaleDateString()}
                          </div>
                          <div className="flex items-center gap-1">
                            <div className={`w-2 h-2 rounded-full ${hasContent ? 'bg-green-500' : 'bg-yellow-500'}`} />
                            <span className={`text-xs font-medium ${hasContent ? 'text-green-600' : 'text-yellow-600'}`}>
                              {hasContent ? 'Generated' : 'Pending'}
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <Link href={`/brands/${brand.id}/content/${idea.id}`}>
                        <Button size="sm" className="flex items-center gap-2">
                          {hasContent ? (
                            <>
                              <Eye className="w-3 h-3" />
                              View Content
                            </>
                          ) : (
                            <>
                              <Sparkles className="w-3 h-3" />
                              Generate Content
                            </>
                          )}
                        </Button>
                      </Link>
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="pt-0">
                  <div className="space-y-3">
                    <p className="text-sm text-gray-600 leading-relaxed">
                      {idea.description}
                    </p>
                    
                    {latestContent && (
                      <div className="bg-green-50 border border-green-200 rounded-lg p-3">
                        <div className="flex items-center gap-2 mb-2">
                          <CheckCircle className="w-4 h-4 text-green-600" />
                          <span className="text-xs font-medium text-green-700">Generated Content Preview</span>
                        </div>
                        <p className="text-xs text-gray-600 leading-relaxed line-clamp-3">
                          {latestContent.content}
                        </p>
                        <div className="flex items-center gap-2 mt-2 text-xs text-gray-500">
                          <Calendar className="w-3 h-3" />
                          Generated {new Date(latestContent.created_at).toLocaleDateString()}
                        </div>
                      </div>
                    )}
                    
                    {idea.image_prompt && (
                      <div className="bg-gray-50 border border-gray-200 rounded-lg p-3">
                        <div className="flex items-center gap-2 mb-2">
                          <ImageIcon className="w-4 h-4 text-gray-500" />
                          <span className="text-xs font-medium text-gray-700">Image Concept</span>
                        </div>
                        <p className="text-xs text-gray-600 leading-relaxed">
                          {idea.image_prompt}
                        </p>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            )
          })}
        </div>
      ) : (
        <Card className="border-2 border-dashed border-gray-200">
          <CardContent className="py-12 text-center">
            <div className="flex flex-col items-center space-y-4">
              <div className={`p-4 rounded-full ${getPlatformColor(platform)}`}>
                {getPlatformIcon(platform)}
              </div>
              <div>
                <h3 className="text-lg font-semibold text-gray-900 mb-2">
                  No {platform} ideas yet
                </h3>
                <p className="text-gray-600 mb-6 max-w-md">
                  Generate AI-powered content ideas tailored for {platform} using your content strategy angle
                </p>
              </div>
              <IdeaGenerator brand={brand} angle={angle} platform={platform} />
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}